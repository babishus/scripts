using System;
using System.Collections.Generic;
using FaucetCollector.Script;
//css_ref ImageProcessing.dll
//css_ref ProcessingImagesUsingLockBits

using System.Drawing;
public class HotFlashHits : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://hotflashhits.com")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="NClaim",Display="NClaims",Type=EditorType.TextBox,Default="100"},
                new FaucetSetting(){Name="LogEveryCredits",Display="LogEveryCredits",Type=EditorType.CheckBox,Default=true},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Hot";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*[text()='']";
        FailXPath = "//*[text()='']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath( "//a[@href='members.php?mf=lo']" ) != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        if (!Driver.Url.Contains("https://hotflashhits.com/login.php?s=noauth"))
        {
            GoToUrl("https://hotflashhits.com/login.php?s=noauth");
        }
        Wait(1);
        var UserBox = ElementByXPath("//input[@name='login']");
        if (!IsVisible(UserBox))
        {
            return Fail("Fail user box is not visible");
        }
        SetText(UserBox, GetSetting("User"));
        var PasswordBox = ElementByXPath("//input[@name='password']");
        if (!IsVisible(PasswordBox))
        {
            return Fail("Password box is not visible");
        }
        SetText(PasswordBox, GetPassword("Pass"));
        Wait(1);
        var Button = ElementByXPath("//input[@value='Login']");
        if (!IsVisible(Button))
        {
            return Fail("Button login is not visible");
        }
        Click(Button);
        Wait(1);
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        GoToUrl("http://hotflashhits.com/members.php");
        Wait(1);
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
        if (!Driver.Url.Contains("http://hotflashhits.com/surfing.php"))
        {
            GoToUrl("http://hotflashhits.com/surfing.php");
        }
        Wait(1);
        var NClaim = GetSetting("NClaim");
        int Claims = 0;
        try
        {
            Claims = Convert.ToInt32(NClaim);
        }
        catch (Exception)
        {
            Claims = 100;
        }
        int n = 0;
        int CountNotVisible = 0;
        while (n <= Claims)
        {
            Wait(1);
            var timer = ElementByXPath("//div[@id='timer']");
            if (IsVisible(timer))
            {
                DateTime t1 = DateTime.Now.AddSeconds(15);
                while (!timer.Text.Contains("GO"))
                {
                    timer = ElementByXPath("//div[@id='timer']");
                    if (DateTime.Now > t1)
                    {
                        break;
                    }
                }
          
                Wait(1);
                var PrincipalImage = ElementByXPath("//img[contains(@src,'surficon')]");
                Bitmap Principal2 = TakeScreenshot(Base.Captcha.CaptchaService.Manual, PrincipalImage);
                Principal2 = Principal2.Clone(new Rectangle(2, 0, Principal2.Width - 2, Principal2.Height),Principal2.PixelFormat);
                ImageProcessing.UsingColors.MyImage Principal = new ImageProcessing.UsingColors.MyImage(Principal2,10);
            
                Bitmap SecundaryCaptcha = TakeScreenshot(Base.Captcha.CaptchaService.Manual, ElementByXPath("//div[@id='myform']//td"));
                List<ImageProcessing.UsingColors.MyImage> SecundaryImages = new List<ImageProcessing.UsingColors.MyImage>();
                var Secundary = ElementsByXPath("//img[contains(@onclick,'return surfbar_click')]");
                int Count = 0;
                for(int i = 0; i < Secundary.Count; i++)
                {
                    if (i == 0)
                    {
                        SecundaryImages.Add(new ImageProcessing.UsingColors.MyImage(SecundaryCaptcha.Clone(new Rectangle(Count+2, 0, 48, 50), SecundaryCaptcha.PixelFormat), 20));
                    }
                    else
                    {
                        SecundaryImages.Add(new ImageProcessing.UsingColors.MyImage(SecundaryCaptcha.Clone(new Rectangle(Count, 0, 50, 50), SecundaryCaptcha.PixelFormat), 20));
                    }
                    Count += 50;
                }
             
                ImageProcessing.UsingColors.CorrectImageSelector selector = new ImageProcessing.UsingColors.CorrectImageSelector(Principal);
                for(int i = 0; i < 4; i++)
                {
                    selector.AddNewSecundaryImg(SecundaryImages[i]);
                   
                }
            
                
                Click(Secundary[selector.GetPosition()[0]]);
            
                Wait(1);
                CountNotVisible = 0;
                if (GetBoolSetting("LogEveryCredits"))
                {
                    var SuccesSurf = ElementByXPath("//b[contains(text(),'Credited')]");
                    if (IsVisible(SuccesSurf))
                    {
                        Log(SuccesSurf.Text);
                    }
                    else if(IsVisible(ElementByXPath("//b[contains(text(),'Incorrect click')]")))
                    {
                        Log("Incorrect Click");
                    }
                }
            }
            else
            {
                if (!Driver.Url.Contains("http://hotflashhits.com/surfing.php"))
                {
                    GoToUrl("http://hotflashhits.com/surfing.php");
                }
                else
                {
                    Driver.Navigate().Refresh();
                }
                Wait(1);
                CountNotVisible++;
            }
            n++;
            if (CountNotVisible > 3)
            {
                break;
            }
        }
        if (n > Claims)
        {
            return GetWaitSetting();
        }
        else
        {
            Log("Something is wrong reset the script");
        }

        return base.DoSolveFaucet();
        //This faucet has nothing to do here. We will let Faucet Collector handle it.

    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
