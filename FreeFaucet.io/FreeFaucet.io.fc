//==================//
//script Written by: ••AviramDayan•• 05/11/2019 00:00PM - Version 1
//Last Update: 11/03/2020 07:20AM - Version 2
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;

using OpenQA.Selenium.Support.UI;
using System.Linq;

//css_inc ShortLinkUtilities
//css_inc RecaptchaUtilities

public class BloxawardsScript : FaucetScript
{

    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings(DomainName_String)
            {
                new FaucetSetting() { Name = "Email", Display = "E-mail", Type = EditorType.TextBox, Required = true },
                new FaucetSetting() { Name = "Password", Display = "Password", Type = EditorType.Password, Required = true },
                new FaucetSetting(){Name="AutoExchange",Display="AutoExchange - ON/OFF - Exchange all coins to BRAZ - note - open account in 'southxchange' to exchange BRAZ to any coin",Type=EditorType.CheckBox,Default=true},	
                new FaucetSetting(){Name="FaucetClaim",Display="FaucetClaim - ON/OFF ",Type=EditorType.CheckBox,Default=true},	
                new FaucetSetting() { Name = "AdressBRAZ", Display = "AdressBRAZ", Type = EditorType.TextBox, Required = false },
            };
        }
    }


    string DomainName_String = "https://FreeFaucet.io/";



    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Free Faucet";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*";
        FailXPath = "//*";

        //Let Faucet Collector start up everything
        base.Start();
    }


    bool ad; //custom bool
	

    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    public override bool IsLoggedIn()
    {
	    return ElementByXPath("//a[contains(text(),'Logout') ]") != null;
        //return true;
    }


//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {
  
        //if we already login go to here
        GoToUrl(DomainName_String);
	
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//




//=============//
//DoLogin
//=============//
    public override int DoLogin()
    {
      
	 //var checks login or exit
     var ExitButton = ElementByXPath("//a[contains(text(),'Logout') ]"); //SIGN OUT

		 
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {
		
        //else go to normal login
		GoToUrl(DomainName_String+"/login");
        Wait();	
	    Wait(2);		
	
        var box_user = FindVisibleElement_Function(By.XPath("//input[@id='login_input_email']")); 
        SetText(box_user, GetSetting("Email"));
		
        Wait(2);
		
        var box_pass = FindVisibleElement_Function(By.XPath("//input[@id='login_input_password']"));
        SetText(box_pass, GetPassword("Password"));
		
        Wait(2);
	
        //SolveCaptcha if apper
        var result = base.DoSolveCaptcha();
        //RecaptchaUtility utility = new RecaptchaUtility(this);
        //utility.DoSolve();
        if (result > 0)
        {
          return Fail("fail not solve"); //return to solve again - if something wrong
        }

        Wait();	
	    Wait(2);
		
        var ButtonLog = FindVisibleElement_Function(By.XPath("//input[@type='submit']")); 
        Click(ButtonLog);

        Wait(2);

	 }	//end ExitButton


        return base.DoLogin();
    }

//=============//
//DoLogin
//=============//



    public override int AfterLogin()
    {
	
    return base.AfterLogin();
    }




    public override int GetFaucetWaitTime()
    {
		
        if (ad)
        {
		 ad=false;
         return GetWaitSetting();
        }
		
		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }




    public override int BeforeSolveCaptcha()
    {
        return base.BeforeSolveCaptcha();
    }

    public override int DoSolveCaptcha()
    {
        return base.DoSolveCaptcha();
    }

    public override int AfterSolveCaptcha()
    {
        return base.AfterSolveCaptcha();
    }

    public override int BeforeSolveFaucet()
    {
        return base.BeforeSolveFaucet();
    }



//=============//
//DoSolveFaucet
//=============//
    public override int DoSolveFaucet()
    {



    //=============//
    //FaucetClaim
    //=============//
    if (GetBoolSetting("FaucetClaim"))
    {
	
        GoToUrl(DomainName_String+"/faucets");
        Wait();		
        Wait(2);
		
	    //GoToUrl(DomainName_String+"/claim/index.php?coin_name=bitcoin&*"); // it's impossible to do direct to specific url coin

        var BitcoinCardHere = ElementByXPath("//input[@value='Claim Bitcoin']"); 
        if (IsVisible(BitcoinCardHere))
        {
        Log("BitcoinCardHere - here");
        Click(BitcoinCardHere);
        }

        Wait();		
        Wait(2);
		
        var ZeroNotAvailable = ElementByXPath("//span[@class='alert alert-success' and contains(text(),'LEFT') and contains(text(),'0') ]");

        if (IsVisible(ZeroNotAvailable))
        {
            //We couldn't find the button, return we have a failure.
            Log("Claim - not available today");
			return GetWaitSetting(); //Fail
        }

        Wait(2);

        if (!IsVisible(ZeroNotAvailable))
        {

			Log("claimButton - now");
            var claimButton = ElementByXPath("//form/div[1]/input[@type='submit']");
            Click(claimButton);
			
            Wait(2);

            Recaptcha_Function(); //call
			
            ClaimSuccess(); //Marks the claim as a success
		
        }	//end NOT ZeroNotAvailable
		
		Wait(3);
		
    } //end FaucetClaim
    //=============//	


    //=============//
    //AutoExchange
    //=============//
    if (GetBoolSetting("AutoExchange"))
    {
        GoToUrl(DomainName_String);
		
        Log("AutoExchange");
	  
        var DepositButton = ElementByXPath("//span[contains(text(),'Deposit')]");
        //if (IsVisible(DepositButton))
        //{
			Click(DepositButton);
			Log("DepositButton");
		//}

        var SwapButton = ElementByXPath("//ul[@id='myTab']//a[contains(text(),'Swap')]");
        if (IsVisible(SwapButton))
        {
			Click(SwapButton);
			Log("SwapButton");
		}		

        for(var i=1; i<=18; i++)
        {
          ClickMulti_Menu_Function(i);
        }


	}
    //=============//

	
		//ad = true; //Success
        return GetWaitSetting();	
		
        return base.DoSolveFaucet();
    }
//=============//
//DoSolveFaucet
//=============//




    public override int AfterSolveFaucet()
    {
        return base.AfterSolveFaucet();
    }




    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }


      //===================//
      //ClickMulti_Menu_Function
      //===================//
      public void ClickMulti_Menu_Function (int number)
      {
		  
        var MenuCoins = ElementByXPath("//select[@id='coinswap_select']");   
        Click(MenuCoins);	
		
        Wait(2);
		
        var My_Button_VAR = ElementByXPath("//select[@id='coinswap_select']/option["+number.ToString()+"]");        
        if (IsVisible(My_Button_VAR))
        {    
          Click(My_Button_VAR);      
          Log("ClickMulti_Menu_Function " + number.ToString()  ); //+ My_Coin_info_VAR.Text
          Wait();
          Wait(2);
		  
	    
        var PreGetToken = ElementByXPath("//select[@id='coinswap_select']/option["+number.ToString()+"]");
        SetSetting("StoreAmount", PreGetToken.Text); //Store/save - the iframe that was in first Domain
		
        Wait(2);
		
        var InputEnterToken = ElementByXPath("//input[@id='coinswap_amount']");
        SetText(InputEnterToken, GetSetting("StoreAmount")); //set the text that are stored

        Wait(2);

        var ExchangeEndButton = ElementByXPath("//button[@id='swap_button']"); 
        Click(ExchangeEndButton);
        Log("ExchangeEndButton");
		
        Wait(2);

        }
		
      }// end ClickMulti_Menu_Function
      //=============// 
	
	
      //===================//
      //Recaptcha_Function
      //===================//
      public int Recaptcha_Function ()
      {
        ////in the script
         //for recaptcha popup after click on button - ("//button[contains(@class,'reload')] | //button[contains(@id,'reload')] ")
          var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')]"); 
          if (IsVisible(RecaptchaOpen_Iframe))
          {
            //SolveCaptcha if apper
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Fail solving captcha");
            }
            RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
           }
		
       return 0;		
	  }
      //===================//
	  
	  

//=======================================================================//
//FindVisibleElement_Function - if there are mutliple with the same name //
//=======================================================================//
private IWebElement FindVisibleElement_Function(By by, int timeout = 1)
{
    IWebElement result = null;
    var wait = new WebDriverWait(Driver, TimeSpan.FromSeconds(timeout));
    result = wait.Until(drv =>
      {
        var elements = drv.FindElements(by);
        if (elements.Count > 0)
        {
          var res = elements.FirstOrDefault(e => IsVisible(e));
          if (res != null)
          {
            return res;
          }
        }
        return null;
      });

    return result;
}
//==========//




} //end class
