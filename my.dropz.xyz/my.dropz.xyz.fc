
//==================//
//script Written by: ••AviramDayan•• 03/03/2020 23:50PM - Version 1
//Last Update: 17/04/2020 07:15PM - Version 11
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
//css_inc ShortLinkUtilities
//css_inc RecaptchaUtilities


public class mydropzxyz : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://my.dropz.xyz/")
            {
                new FaucetSetting(){Name="Email",Display="Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},
                
                new FaucetSetting(){Name="SetWallet",Display="SetWallet - ON/OFF - the default is on",Type=EditorType.CheckBox,Default=true},		

				new FaucetSetting(){Name="WalletAdress",Display="WalletAdress xrp",Type=EditorType.TextBox,Required=true},
				new FaucetSetting(){Name="DestinationTag",Display="Destination Tag xrp",Type=EditorType.TextBox,Required=true},
 			
                new FaucetSetting(){Name="FaucetClaim",Display="FaucetClaim - ON/OFF - the default is off",Type=EditorType.CheckBox,Default=false},		
                new FaucetSetting(){Name="AutoSurfAds",Display="AutoSurfAds - ON/OFF",Type=EditorType.CheckBox,Default=true},

                new FaucetSetting(){Name="AutoWithdraw",Display="AutoWithdraw - ON/OFF",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting() { Name = "LimitWithdraw", Display = "LimitWithdraw", Type = EditorType.TextBox, Default = 9000 },

			
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

	
	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
		ad=false;
		
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Dropz";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; //*[text()='']
        FailXPath = "//*"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
	
	
	
	bool ad;
	
	
    public override int DoInit()
    {

	   
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        //In this case we check for en element with the class "loggedIn"
		return ElementByXPath("//a[contains(text(),'Logout')]")!= null;
		//return true;
    }
//==================//
//save Login Cookies 
//==================//
	
	
	
	
	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
		
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
	
	
	

//========//
//DoLogin
//========//
 public override int DoLogin()
 {
	
  var ExitButton = ElementByXPath("//a[contains(text(),'Logout')]"); 

  //if i NOT Login - go to Login Page
  if (!IsVisible(ExitButton))
  {

        GoToUrl("https://my.dropz.xyz/");
        Wait();		
        Wait(2);
      
        Login_Elements_Function();

        var ErrorMessage = ElementByXPath("//h2[contains(text(),'Oops')]");  
        if (IsVisible(ErrorMessage))
        {
	     Log("something wrong - your info is wrong or your account is not activate ");
		 Wait(2);	
         Driver.Navigate().Refresh();
         Login_Elements_Function();
        } 
       
        Captcha_Function (); //call if apper invisible recaptcha after you click on "login button"
        
        Wait();			

        Driver.Navigate().Refresh();
		
        Wait();		
		
  } // end ExitButton

        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
	

	
	
	
	
//==========//
//AfterLogin
//=========//
 public override int AfterLogin()
 {
 
	 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
 }
//==========//
//AfterLogin
//=========//
	
	
	

	
//=============//
//GetFaucetWaitTime
//=============//
 public override int GetFaucetWaitTime()
 {

    if(ad)
	{
        ad=false; //solve the problem in start - after he return to script again
        return GetWaitSetting();  
		
    }	//end ad
	
		
   //let Faucet Collector continue.
   return base.GetFaucetWaitTime();
 }
//=============//
//GetFaucetWaitTime
//=============//
	
	
	
	

    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }
	
	

    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	
	
	


//=============//
//DoSolveFaucet
//=============//
  public override int DoSolveFaucet()
  {

      //=============//
      //SetWallet
      //=============//
      if (GetBoolSetting("SetWallet"))
      {
       SetWallet_Function(); //call	
	  }
      //=============//

      //=============//
      //AutoSurfAds
      //=============//
         if (GetBoolSetting("AutoSurfAds"))
         {

		   GoToUrl("https://my.dropz.xyz/site-friends/");
           Log("AutoSurfAds");	
           Wait();	
	       Wait(7);	

           var Balance_Check = ElementByXPath("//div[contains(@class,'box-body')]//small[contains(text(),'having 10K Drops')]");
	       if (IsVisible(Balance_Check))
	       {
			  Log("AutoWithdraw_Function - required to withdraw above 10k - so we do that :) ");
			  AutoWithdraw_Function(); //call 

		      GoToUrl("https://my.dropz.xyz/site-friends/");
              Log("AutoSurfAds - go again after withdraw");	
              Wait();	
	          Wait(7);	
		   }

           var AutoSurf_Check = ElementByXPath("//a[@style]/i | //a[@class and @id]/i | //a[contains(@class,'btn-app')]/i | //a[contains(@class,'btn-success')]/i | //a[contains(@class,'btn-default')]/i | //a[contains(text(),'Visit Advertiser')] | //i[contains(@class,'fa fa-arrow-right')] | //i[contains(@class,'fa-chevron-right')] | //div[@id='adcopy-puzzle-image'] | //iframe[contains(@src,'recaptcha/api2')]"); 
	       if (IsVisible(AutoSurf_Check))
	       {
			  
		     Log("AutoSurfAds - Available");
             var TimeToWaitForBreak = DateTime.Now.AddSeconds(65);
             while (true)
             {
			   
               CheckForPopupsEnabled = false;
			   
               var ClaimNow_Available = ElementByXPath("//a[@style]/i | //a[@class and @id]/i | //a[contains(@class,'btn-app')]/i | //a[contains(@class,'btn-success')]/i | //a[contains(@class,'btn-default')]/i | //a[contains(text(),'Visit Advertiser')] | //i[contains(@class,'fa fa-arrow-right')] | //i[contains(@class,'fa-chevron-right')] | //div[@id='adcopy-puzzle-image'] | //iframe[contains(@src,'recaptcha/api2')]"); 
	           if (IsVisible(ClaimNow_Available))
	           {
			   Click(ClaimNow_Available);
			   }

               var Captcha_Available = ElementByXPath("//div[@id='adcopy-puzzle-image'] | //iframe[contains(@src,'recaptcha/api2')]");
	           if (IsVisible(Captcha_Available))
	           {
			   Captcha_Function(); //call
			   Wait();
               var FaucetButton = ElementByXPath("//button[contains(text(),'Submit')] | //button[contains(text(),'submit')]");
               Click(FaucetButton);
			   Wait(2);
			   Driver.Navigate().Refresh(); //refresh page
			   }
			   
               Driver.SwitchTo().Window(Driver.WindowHandles[0]);
			   
               var ButtonToWait = ElementByXPath("//a[contains(text(),'wait')] | //a[contains(text(),'Wait')]");
               while (IsVisible(ButtonToWait))
               {
				  Wait();
				  Log("wait");

                  if (!IsVisible(ElementByXPath ("//a[contains(text(),'wait')] | //a[contains(text(),'Wait')]") )) 
	              {
				  Log("AutoSurf - Success");
				  ClaimSuccess(); //Success
			      Driver.Navigate().Refresh(); //refresh page
                  CheckForPopupsEnabled = true;
                  CheckForPopups();				  
		          }

                  if (DateTime.Now > TimeToWaitForBreak) //if the time above 65 sec 
                  {
		          Log("AutoSurfAds - break - TimeToWaitForBreak");
                  break; //break the wait loop
                  }
			   }	  		
			   
               if (!IsVisible(ElementByXPath ("//a[@style]/i | //a[@class and @id]/i | //a[contains(@class,'btn-app')]/i | //a[contains(@class,'btn-success')]/i | //a[contains(@class,'btn-default')]/i | //a[contains(text(),'Visit Advertiser')] | //i[contains(@class,'fa fa-arrow-right')] | //i[contains(@class,'fa-chevron-right')] ") )) 
	           {
		         Log("AutoSurfAds - break - not Available");
                 break; //after break the while  
	           }
			   
               if (DateTime.Now > TimeToWaitForBreak) //if the time above 65 sec 
               {
		       Log("AutoSurfAds - break - TimeToWaitForBreak");
               break; //break the wait loop
               }
			   
             } //end while (true)
			 
	       } // end ClaimNow_Available
         } //end AutoSurfAds
      //=============//
		
	  
	  
      //=============//
      //FaucetClaim
      //=============//
      if (GetBoolSetting("FaucetClaim"))
      {
		
	    Wait(2);
		
		GoToUrl("https://my.dropz.xyz/captcha/");
        Wait();
	    Wait(2);

        var TimeToWaitForBreak = DateTime.Now.AddSeconds(150);
        while (true)
        {
			 
          var FaucetCheck = ElementByXPath("//input[@type='submit' and @value='Submit'] | //div[@id='adcopy-puzzle-image'] | //iframe[contains(@src,'recaptcha/api2')]");
          if (IsVisible(FaucetCheck))
          {
 
            Wait(7);
			
            Captcha_Function (); //call
			
            Wait(2); 
			
            var FaucetButton = ElementByXPath("//input[@type='submit' and @value='Submit']");
            Click(FaucetButton);
		    
	        Wait(1);
		    
            var SuccessCheck = ElementByXPath("//div[contains(@class,'jBox-content') and contains(text(),'Matched')]");
            if (IsVisible(SuccessCheck))
		    {
            var SuccessMessage = ElementByXPath("//div[contains(@class,'jBox-content')]");
            Log(SuccessMessage.Text);
			ClaimSuccess();
		    }

          }// end FaucetCheck
		  
          if (!IsVisible(FaucetCheck))
	      {
		  Log("FaucetClaim - break - not Available");
		  break;
		  }

          if (DateTime.Now > TimeToWaitForBreak) //if the time above 65 sec 
          {
		  Log("FaucetClaim - break - TimeToWaitForBreak");
          break; //break the wait loop
          }

        } //end while true		
      } // end FaucetClaim


      //=============//
      //AutoWithdraw
      //=============//
         if (GetBoolSetting("AutoWithdraw"))
         {
			 Log("AutoWithdraw - Active");
			 AutoWithdraw_Function(); //call

         } //end AutoWithdraw
      //=============//

	 return GetWaitSetting();

  //This faucet has nothing to do here. We will let Faucet Collector handle it.
  return base.DoSolveFaucet();
  }
	
	

    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
	

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }



        //=================//
       //Login_Elements_Function
        //=================//
        public int Login_Elements_Function()
        {
			
           var Email_VAR = ElementByXPath("//div[@class='box box-info']//input[@type='email']");      
           if (IsVisible(Email_VAR))
           {
            SetText(Email_VAR, GetSetting("Email"));
           }
           
           Wait(2);
		   
           var Password_VAR = ElementByXPath("//div[@class='box box-info']//input[@type='password']");      
           if (IsVisible(Password_VAR))
           {
            SetText(Password_VAR, GetPassword("Password"));
           }
		   
           Wait(2);

           Captcha_Function(); //call

           Wait();			
	
           var ButtonLog = ElementByXPath("//div[@class='box box-info']//button[@type='submit']");  
           if (IsVisible(ButtonLog))
           {
            Click(ButtonLog);
           }

           Driver.Navigate().Refresh();

           Wait(2);

     	return 0;
        }//end Login_Elements_Function
        //=================//	
	


        //=================//
       //AutoWithdraw_Function
        //=================//
        public int AutoWithdraw_Function()
        {

		   Log("AutoWithdraw_Function - check");

           GoToUrl("https://my.dropz.xyz/account/");
		   Wait(2);
		   
           var balance = ElementByXPath("//b[@id='display_pending_drops']");
           string BalanceSTRING = balance.Text.Trim().Replace(",", "").Split('.')[0];
           int BalanceINT = Convert.ToInt32(BalanceSTRING);
   
           int MyAmount;
           Int32.TryParse(GetSetting("LimitWithdraw"), out MyAmount);
   
           if (BalanceINT < MyAmount) // - 3000
           {
               Log("AutoWithdraw - Under < not good ");
              //do all stuff
           }
   
           if (BalanceINT > MyAmount) // + 3000
           {
               Log("AutoWithdraw - Above > good we do stuff");
               var WithdrawButton = ElementByXPath("//button[@id='payout_bt']");
			   Click(WithdrawButton);
               Wait(7);			   
			   Log("Withdraw success");
           }
			
		return 0;
        }//end AutoWithdraw_Function
        //=================//	


	
        //=================//
       //SetWallet_Function
        //=================//
        public int SetWallet_Function()
        {

		  Log("SetWallet_Function - check");
		  
		  GoToUrl("https://my.dropz.xyz/account/");
		
          var AdressAndDestinationTagCheck = ElementByXPath("//table[@class='table table-condensed']//b[contains(text(),'Specified')]");
          if (IsVisible(AdressAndDestinationTagCheck)) 
		  {
		   var ChangeWallet_2VAR_Tab = ElementByXPath("//a[contains(text(),'Change wallet')]");
           Click(ChangeWallet_2VAR_Tab);
		   
	       Wait();		
		   
           var SetWallet_VAR = ElementByXPath("//input[@class='swal2-input']");  
           var DestinationTag_VAR = ElementByXPath("//input[@class='swal2-input']");
           var NextButton = ElementByXPath("//button[contains(text(),'Next')]");
		   
           SetText(SetWallet_VAR, GetSetting("WalletAdress")); 
           Wait(2);	
           Click(NextButton);
           Wait(2);	
           SetText(DestinationTag_VAR, GetSetting("DestinationTag")); 
           Wait(2);	
           Click(NextButton);
           Wait(2);	
		  } //end AdressAndDestinationTagCheck not visible
			
		return 0;
        }//end SetWallet_Function
        //=================//	



        //=================//
       //Captcha_Function
        //=================//
        public int Captcha_Function()
        {
		
          if (IsVisible(ElementByXPath ("//div[contains(@class,'box-info')]//img") ))
		  {
			Log("solve - ImageCap");
            //solve Captcha X2 XPath (1 = captcha image | 2 = input text )
            var ImageCap_VAR = DoSolveImageCaptcha(ElementByXPath("//div[contains(@class,'box-info')]//img"),ElementByXPath("//div[contains(@class,'box-info')]//input[@placeholder='Captcha']")); 

            if (ImageCap_VAR > 0)
            {
               return Fail("fail not solve"); //return to solve again - if something wrong
            }
			
		  } // end ImageCap


          if (IsVisible(ElementByXPath ("//div[contains(@id,'adcopy-puzzle-image')]/img") ))
		  {
			Log("solve - SolveMedia_VAR");
            //solve Captcha X2 XPath (1 = captcha image | 2 = input text )
            var SolveMedia_VAR = DoSolveImageCaptcha(ElementByXPath("//div[contains(@id,'adcopy-puzzle-image')]/img"),ElementByXPath("//input[contains(@id,'adcopy_response')]")); 

            if (SolveMedia_VAR > 0)
            {
               return Fail("fail not solve"); //return to solve again - if something wrong
            }
			
		  } // end SolveMedia


          //Recaptcha	  
          var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')]");
          if (IsVisible(RecaptchaOpen_Iframe) )
		  {
			Log("solve - Recaptcha");

            //SolveCaptcha if apper
            var Recap = base.DoSolveCaptcha();
            if (Recap > 0)
            {
                return Fail("Fail solving captcha");
            }
            RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
			
		  }//end RecaptchaOpen_Iframe

     	return 0;
        }//end VOID_Template_Function
        //=================//	
	
	
} //public class 
