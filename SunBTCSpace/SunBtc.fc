
using FaucetCollector.Captcha.AntibotLinksImageType;
using FaucetCollector.Script;
using System;
using System.Linq;
using System.Threading.Tasks;
//css_ref FaucetCollector.Utilities
//css_ref FaucetCollector.Captcha
public class sunbtcScript : FaucetScript
{

    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings ( "http://sunbtc.space" )
            {
                new FaucetSetting(){Name="User",Display="Wallet",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Bonus",Display="Bonus - on/off",Type=EditorType.CheckBox,Default=true},


            };
        }
    }



    public override void Start ( )
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title="Get";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath="//div[@class='additionally success' and contains(text(),'satoshi')]";
        FailXPath="//div[@class='additionally error']";

        //Let Faucet Collector start up everything
        base.Start ( );
    }

    public override bool IsLoggedIn ( )
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath ( "//a[@id='signout']" )!=null;
    }
 
    //=======//
    public override int DoLogin ( )
    {
        var WalletAddress = ElementByXPath("//input[@id='addressField']");
        if ( !IsVisible ( WalletAddress ) )
        {
            return Fail ( "Wallet address is not visible" );
        }
        SetText ( WalletAddress , GetSetting ( "User" ) );
        Wait ( 1 );
        var buttonLogin = ElementByXPath("//input[@id='signin']");
        if ( !IsVisible ( buttonLogin ) )
        {
            return Fail ( "Button login is not visible" );
        }
        Click ( buttonLogin );
        Wait ( 1 );
        var Login2 = ElementByXPath("//div[contains(@id,'captchaButton')]");
        if ( IsVisible ( Login2 ) )
        {
            Click ( Login2 );
        }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin ( );
    }

    public override int GetFaucetWaitTime ( )
    {
        var timer = ElementByXPath("//div[@id='claim' and contains(text(),':')]");
        if ( IsVisible ( timer ) )
        {
            try
            {
                var Splited=timer.Text.Replace(" ","").Split(':');
                int sec,min;
                if(int.TryParse(Splited[1],out sec) && int.TryParse(Splited[0], out min ) )
                {
                    return sec+min*60;
                }

            }
            catch ( Exception )
            {
                return 300;
            }
        }
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime ( );


    }

    public override int DoSolveCaptcha ( )
    {
        Wait ( );
        if ( IsVisible ( ElementByXPath ( "//*[@class='geetest_radar_tip']" ) ) )
        {
            int result = 0;
            FaucetCollector.Captcha.GetestCaptcha getestCaptcha = new FaucetCollector.Captcha.GetestCaptcha(this);
            bool res2=  getestCaptcha.DoInitSolve();
            Wait ( 2 );
            if ( IsVisible ( ElementByXPath ( "//img[contains(@src,'data:image/png;base64,')]" ) ) )
            {
              AntiBotLinksUtility solver = new AntiBotLinksUtility(this);
                bool res = solver.DoInit();
                if ( !res||!res2 )
                {
                    result=1;
                }
            }
            return result;
        }
        if ( IsVisible ( ElementByXPath ( "//iframe[contains(@src,'bit-puzzle')]" ) ) )
        {
            int result = 0;
            PuzzleBall puzzleBallSolver = new PuzzleBall(this);
            puzzleBallSolver.DoSolve ( );
            Wait ( 1 );
            if ( IsVisible ( ElementByXPath ( "//img[contains(@src,'data:image/png;base64,')]" ) ) )
            {
                AntiBotLinksUtility solver = new AntiBotLinksUtility(this);
                bool res = solver.DoInit();
                if ( !res )
                {
                    result=1;
                }
            }
            return result;
        }
        else
        {
            Task<int> extraTask = null;
            extraTask=Task.Run ( ( ) =>
            {
                return base.DoSolveCaptcha ( );
            } );
            var result = 0;
            if ( IsVisible ( ElementByXPath ( "//img[contains(@src,'data:image/png;base64,')]" ) ) )
            {
                AntiBotLinksUtility solver = new AntiBotLinksUtility(this);
                bool res = solver.DoInit();
                if ( !res )
                {
                    result=1;
                }
            }

            if ( extraTask!=null )
            {

                extraTask.Wait ( );


                result+=extraTask.Result;

            }
            return result;
        }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
    }

    public override int DoSolveFaucet ( )
    {
        Wait ( );
        //Bonus
        BonusFunction ( ); //call to Function

        var Elem = ElementByXPath("//div[contains(text(),'Click HERE to claim again')]");
        if ( IsVisible ( Elem ) )
        {
            Click ( Elem );
        }

        var ClaimNew = ElementByXPath("//div[@id='claim']");  // if this apper
        if ( IsVisible ( ClaimNew ) )
        {
            Click ( ClaimNew );
        }

        var ClaimButton = ElementByXPath("//div[contains(text(),'Claim your Satoshi') and not(contains(@style,'display: none;'))]");
        if ( IsVisible ( ClaimButton ) )
        {
            Click ( ClaimButton );
        }

        Wait ( );

        var result = DoSolveCaptcha();
        if ( result>0 )
        {
            return Fail ( "Fail solving captcha" );
        }
        Wait ( 3 );
        var button = ElementsByXPath("//div[@id='submit']").FirstOrDefault(X=>(IsVisible(X)));
        if ( !IsVisible ( button ) )
        {
            return Fail ( "Button submit isn't visible" );
        }
        Click ( button );

        //SuccessEnd
        var SuccessEnd = ElementByXPath("//div[@class='additionally success' and contains(text(),'satoshi')]");
        if ( IsVisible ( SuccessEnd ) )
        {
            Log ( SuccessEnd.Text );
        }

        Wait ( );

      

        Wait ( );

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet ( );
    }
  
    private bool BonusFunction ( )
    {

        if ( GetBoolSetting ( "Bonus" ) )
        {

            var BonusVar = ElementByXPath("//*[@id='bonusAds']");
            if ( IsVisible ( BonusVar ) )
            {
                Click ( BonusVar );
                Wait ( );
                var GetBonusVar = ElementByXPath("//input[@id='getBonusBut']");
                if ( IsVisible ( GetBonusVar ) )
                {
                    Click ( GetBonusVar );
                }
                Wait ( );
                var SuccessFaucet = ElementByXPath("//*[@id='centerArea']/div[2]");
                if ( IsVisible ( SuccessFaucet ) )
                {
                    Log ( SuccessFaucet.Text );
                }
                Driver.Navigate ( ).Refresh ( );
            }

        } 

        return true;
    } 


} 
