
//==================//
//script Written by: ••AviramDayan•• 06/01/2020 06:00PM - Version 1
//Last Update: 28/04/2020 03:00PM - Version 4
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
//css_inc ShortLinkUtilities
//css_inc RecaptchaUtilities


public class FaucetPay : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://FaucetPay.io")
            {
                new FaucetSetting(){Name="Email",Display="UserName OR Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                //new FaucetSetting(){Name="Address",Display="Address HORIZEN - ZEN ",Type=EditorType.TextBox,Required=true},
				
                new FaucetSetting(){Name="Rock_Paper_Scissors_Faucet",Display="Rock Paper Scissors - Faucet",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="PaidToClick",Display="PaidToClick - visit ads with Recaptcha",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="RewardPointsConvert",Display="Reward Points - Convert RP to Satoshi when you reach to 1000000 RP (10 RP = 1 SAT)",Type=EditorType.CheckBox,Default=false},			
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

	

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
		ad=false;
		
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "FaucetPay";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*";  //*[text()='']
        FailXPath = "//*"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
	
	
	
	bool ad;
	
	
    public override int DoInit()
    {

	   
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        //In this case we check for en element with the class "loggedIn"
		return ElementByXPath("//a[contains(@href,'account/logout')] ")!= null;
		//return true;
    }
//==================//
//save Login Cookies 
//==================//
	
	
	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
		
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
	
	
	
	
	

	
//=============//
//start DoLogin
//=============//
    public override int DoLogin()
    {


	 //var checks login or exit
     var ExitButton = ElementByXPath("//a[contains(@href,'account/logout')] "); //SIGN OUT

		 
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {
		
        //else go to normal login
		GoToUrl("https://faucetpay.io/account/login");
        Wait();	
	    Wait(2);		
	
        if (IsVisible(ElementByXPath ("//input[@name='user_name']") )) 
	    {
         var box_user = ElementByXPath("//input[@name='user_name']");
         SetText(box_user, GetSetting("Email"));
	    }
		
        Wait(2);

        if (IsVisible(ElementByXPath ("//input[@name='password']") )) 
	    {
         var box_pass = ElementByXPath("//input[@name='password']");
         SetText(box_pass, GetPassword("Pass"));
	    }
		
        Wait(2);

       //SolveMedia & visible Recaptcha 
        var result = DoSolveCaptcha();
        if (result > 0)
        {
           return Fail("fail not solve"); //return to solve again - if something wrong
        }
        Wait(2);
				
        if (IsVisible(ElementByXPath ("//button[@type='submit' and contains(text(),'Sign')]") )) 
	    {
        var ButtonLog = ElementByXPath("//button[@type='submit' and contains(text(),'Sign')]");
        Click(ButtonLog);
	    }
		
        Wait();		
	
	 }	//end ExitButton
 
	 
        //This faucet has nothing to do here.    
        return base.DoLogin();
    }
//=============//
//start DoLogin
//=============//
	

	
	
	
	
//==========//
//AfterLogin
//=========//
 public override int AfterLogin()
 {
 
	 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
 }
//==========//
//AfterLogin
//=========//
	
	
	

	
//=============//
//GetFaucetWaitTime
//=============//
 public override int GetFaucetWaitTime()
 {

    if(ad)
	{
        ad=false; //solve the problem in start - after he return to script again
        return GetWaitSetting();  

    }	//end ad
		
		
   //let Faucet Collector continue.
   return base.GetFaucetWaitTime();
 }
//=============//
//GetFaucetWaitTime
//=============//
	
	
	
	

    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }
	
	

    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	
	
	


//=============//
//DoSolveFaucet
//=============//
  public override int DoSolveFaucet()
  {

      //=============//
      //Rock_Paper_Scissors_Faucet
      //=============//
         if (GetBoolSetting("Rock_Paper_Scissors_Faucet"))
         {
           Title = "FaucetPay";
		   GoToUrl("https://faucetpay.io/faucet");
           Log("Rock_Paper_Scissors_Faucet");	
           Wait();	
	       Wait(2);	

           var TextBlock = ElementByXPath ("//div[contains(@class,'alert alert-primar') and contains(@role,'alert') ] ");
	       if (!IsVisible(TextBlock)) // if not visible - do stuff
	       {
              var ClaimNow_Available = ElementByXPath ("//button[@id='matcher']");
	          if (IsVisible(ClaimNow_Available))
	          {
		        Log("Rock_Paper_Scissors_Faucet - Available");
                Click(ClaimNow_Available);
                Wait(6);
	          } // end ClaimNow_Available
		      
                Time_Function(); //call if is visible
			    
                Wait(3);
			    
                if (IsVisible(ElementByXPath ("//div[contains(@style,'visibility: visible; position: absolute;')]") )) 
	            {
                   Log("Rock_Paper_Scissors_Faucet - do Recaptcha"); //call
                   Recaptcha_Function(); //call
                   Time_Function(); //call again if is visible	
                   Wait(2);	
		      
                   var WaitingForOpponentText = ElementByXPath("//h4[@class='tx-black-6 tx-sans tx-10 tx-bold' and contains(text(),'Waiting') ]");	
                   var Time_1_ToWaitForBreak = DateTime.Now.AddSeconds(180);
                   while (IsVisible(WaitingForOpponentText))
                   {
			   		Wait();
		               Log("Rock_Paper_Scissors_Faucet - Bonus_Available - WaitingForOpponent");
			     	    if(IsVisible(ElementByXPath ("//div[@class='row game-section hidden']") )) 
	                   {
                       break; //after break the while  
			     	    }
			     	  
                       if (DateTime.Now > Time_1_ToWaitForBreak) //if the time above 120 sec 
                       {
		               Log("Rock_Paper_Scissors_Faucet - break - Time_2_ToWaitForBreak");
                       break; //break the wait loop
                       }
			   		
			       } //end while (true)
		      
			    } //end @style,'visibility - Recaptcha
			    
                Wait(3);
		      
                var SectionOpen = ElementByXPath("//div[@class='row game-section']");			 
                var Time_2_ToWaitForBreak = DateTime.Now.AddSeconds(180);
                while (IsVisible(SectionOpen))
                {	
                  Wait();		 
		          Log("Rock_Paper_Scissors_Faucet - Bonus_Available - wait normal");
		      
                  if (IsVisible(ElementByXPath ("//div[@class='row game-section hidden']") ))  //if zero break ("//h3[@id='timer-response' and starts-with(text(),'0') ]")
	              {
                    Wait(8);
                    var SuccessMessage = ElementByXPath("//div[@class='alert alert-solid alert-dark' and contains(text(),'Congratulations') ]");
			   	 if (IsVisible(SuccessMessage))
                    {
                    var SuccessVAR = ElementByXPath("//div[@class='alert alert-solid alert-dark']");
		            Log("Success - " + SuccessVAR.Text);
                    ClaimSuccess(); //success to FC
                    Wait(2);
			   	 }
		            Log("Rock_Paper_Scissors_Faucet - break");
                    break; //after break the while  
	              }
		      
                  if (DateTime.Now > Time_2_ToWaitForBreak) //if the time above 120 sec 
                  {
		          Log("Rock_Paper_Scissors_Faucet - break - Time_2_ToWaitForBreak");
                  break; //break the wait loop
                  }
			      
                } //end while (true)
					
		   } // end TextBlock

         } //end Rock_Paper_Scissors_Faucet
      //=============//



      //=============//
      //PaidToClick
      //=============//
         if (GetBoolSetting("PaidToClick"))
         {
           Title = "FaucetPay";
		   GoToUrl("https://faucetpay.io/ptc");
           Log("PaidToClick");	
           Wait();	
	       Wait(2);	

		   Title = "View Ad";	  		   
           var ClaimNow_Available = ElementByXPath ("//div[* and @class='col-sm-4']//button[contains(@onclick,'faucetpay.io/ptc')]");
	       if (IsVisible(ClaimNow_Available))
	       { 
	        Click(ClaimNow_Available);
            Log("PaidToClick - ClaimNow_Available");
		   }
			 
             var SectionOpen = ElementByXPath("//span[@id='duration' and starts-with(text(),'0')]");			 
             var Time_2_ToWaitForBreak = DateTime.Now.AddSeconds(240);
             while (!IsVisible(SectionOpen))
             {	
		       Wait();
		       Log("PaidToClick - Bonus_Available - wait normal");
			   
	           if (IsVisible(ElementByXPath ("//span[@id='duration' and starts-with(text(),'0')]") ))
			   {
				 Recaptcha_Function();
				 
		         Wait(2);

                 var GetButton = ElementByXPath("//div[@class='modal fade show']//input[contains(@type,'submit') ]");
	             if (IsVisible(GetButton))
	             { 
	              Click(GetButton);
                  Log("PaidToClick - GetButton - click");
		         }

		         Wait();

                 if (IsVisible(ElementByXPath ("//div[@class='alert alert-info' and contains(text(),'credit')] | //div[@class='alert alert-info' and contains(text(),'Good job') ]") ))
                 {
                 var SuccessVAR = ElementByXPath("//div[@class='alert alert-info']") ;
		         Log("Success - " + SuccessVAR.Text);
                 ClaimSuccess(); //success to FC
                 Wait(2);
		         Log("PaidToClick - break");
                 break; //after break the while  			 
				 }

			   } //end Visible timer ad 0	   
			   
	           if (DateTime.Now > Time_2_ToWaitForBreak)
               {
		       Log("PaidToClick - break - Time_2_ToWaitForBreak");
               break; //break the wait loop
               }
			 
             } //end while (true)
		
         } //end PaidToClick
      //=============//


      //=============//
      //RewardPointsConvert
      //=============//
         if (GetBoolSetting("RewardPointsConvert"))
         {
           Title = "FaucetPay";
		   GoToUrl("https://faucetpay.io/page/reward-points");
           Log("RewardPointsConvert");	
           Wait();	
	       Wait(2);	
			
           var RewardPointsConvert_Claim = ElementByXPath ("//button[contains(@class,'btn-info') and contains(text(),'RP') or contains(text(),'Convert')]");
	       if (IsVisible(RewardPointsConvert_Claim))
	       {
		     Log("RewardPointsConvert_Claim - Available");
             Click(RewardPointsConvert_Claim);
             Wait(6);
	       }

           var CheckSuccess = ElementByXPath ("//div[contains(@class,'alert-info') and contains(text(),'need a minimum')]");
	       if (IsVisible(CheckSuccess))
	       {
		     Log("CheckSuccess - fail - you need 1000000");
	       }
	       if (!IsVisible(CheckSuccess))
	       {
		     Log("CheckSuccess - success");
	       }
		   
           Wait();
		   
         } //end RewardPointsConvert
      //=============//
	  
	  
   //ClaimSuccess(); //Marks the claim as a success
   return GetWaitSetting();  

  //This faucet has nothing to do here. We will let Faucet Collector handle it.
  return base.DoSolveFaucet();
  }
	
	
	

    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
	
	
	

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
	
        //=================//
       //Recaptcha_Function
        //=================//

        public int Recaptcha_Function()
        {

            //SolveCaptcha if apper
            var result = base.DoSolveCaptcha();
            RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
            if (result > 0)
            {
                return Fail("Fail solving captcha");
            }

		  
		return 0;
        }//end Recaptcha_Function
        //=================//	
	

        //=================//
       //Time_Function
        //=================//
        public int Time_Function()
        {
         var TimerOnText = ElementByXPath("//div[@class='alert alert-solid alert-dark' and contains(text(),'You need to wait for') ]");
		 if(IsVisible(TimerOnText))
         {
         var TimerOn = ElementByXPath("//div[@class='alert alert-solid alert-dark']");
         int sec_INT;
		 sec_INT = Convert.ToInt32(TimerOn.Text.Trim().Split(' ')[5]);
         return sec_INT; 
		 }	
		return 0;
        }//end Time_Function
        //=================//	
	
} //public class
