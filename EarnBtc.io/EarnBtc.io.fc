

//==================//
//script Written by: ••AviramDayan•• 26/06/2019 00:30PM - Version 1
//Last Update: 14/03/2020 19:10PM - Version 7
//==================//

using System;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System.Text.RegularExpressions;
//css_inc RecaptchaUtilities
//css_inc ShortLinkUtilities


public class EarnBtc : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://earnbtc.io/user/dashboard.page")
            {
                new FaucetSetting(){Name="Email",Display="Email",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=false},
			    //new FaucetSetting(){Name="StoreCookies",Display="StoreCookies - ON/OFF ",Type=EditorType.CheckBox,Default=true },
                new FaucetSetting() { Name = "FaucetClaim", Display = "FaucetClaim - ON/OFF", Type = EditorType.CheckBox, Default = true},
                new FaucetSetting() { Name = "FramedAds", Display = "FramedAds - ON/OFF", Type = EditorType.CheckBox, Default = true},
                new FaucetSetting() { Name = "Choose_Captcha", Display = "Choose_Captcha - ON/OFF - ON Recaptcha - Off SolveMedia", Type = EditorType.CheckBox, Default = false},

            };
        }
    }


	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Earn B";

		SuccessXPath = "//*";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;

        // Save/Store Cookies OR NOT 
        if (GetBoolSetting("StoreCookies"))            
        {
         StoreCookies = true;
		}
		
        if (!GetBoolSetting("StoreCookies"))            
        {
         StoreCookies = false;
		}	
		//======================//
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {
			

		
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath("//span[contains(text(),'Logout')]") != null;
	 
	    //return true;
	 
        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//	




//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {
		

     GoToUrl("https://earnbtc.io/user/dashboard.page");

		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	


	
//========//
//DoLogin
//========//
    public override int DoLogin()
    {
	
     var ExitButton = ElementByXPath("//span[contains(text(),'Logout')]");


	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {

		GoToUrl("https://earnbtc.io/login.page");
		Wait();		
		Wait(2);
/*     
        var StartOpenLogin = ElementByXPath("//div[@class='AuthPage___controls']/button[contains(text(),'Sign In')]");
	    if (IsVisible(StartOpenLogin))
	    { 
        Click(StartOpenLogin);
		}
*/
		Wait(2);
		
        var box_user = ElementByXPath("//input[@name='email']");
        SetText(box_user, GetSetting("Email"));
		
		Wait(2);
		
        var box_pass = ElementByXPath("//input[@name='password']");
        SetText(box_pass, GetPassword("Password"));
		
		
		Wait(2);
		
        Choose_Captcha_Function(); //call

		Wait();	

		GoToUrl("https://earnbtc.io/user/dashboard.page");
		Wait();	
		Wait(2);	
		
        //Title = "test Wallet";
		
		Wait();	

	 } // end ExitButton

        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
 


//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {
 
  
    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


	

//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {

		 ad=false;
		 
         //Time
         var Time_Min_Checking_Exist = ElementByXPath("//div[@id='timer']");         

         if(IsVisible(Time_Min_Checking_Exist)) //Visible
         {
		 
         Log("CountDownTimer");  

         var MinVAR = ElementByXPath("//span[@id='minutes']"); 
         var SecVAR = ElementByXPath("//span[@id='seconds']");
		 
         int MinINT = Convert.ToInt32(MinVAR.Text)*60;
         int SecINT = Convert.ToInt32(SecVAR.Text);

         return MinINT + SecINT;
         }
		 
        }// end ad

		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
 
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {


 
//==============//
//FramedAds//
//==============//
if (GetBoolSetting("FramedAds"))
{

   var TimeToWaitForBreak = DateTime.Now.AddSeconds(480);
   while (true)
   {
     
     Title = "Earn B";
   
     var Card_Exist = ElementByXPath("//div[* and contains(@class,'col-md-4 boxed-ads')]/div[@class='card']/div[@class='header']");         
     if(IsVisible(Card_Exist)) //Visible
     {
   
       CheckForPopupsEnabled = false; //disable
    
       Title = "Framed Ads";
   	
   	   Click(Card_Exist);
   	   Log("Card_Exist");
   	
       Wait();
       Wait(4);
   
       Choose_Captcha_Function(); //call
   	
       Wait(2);
   	
       Recaptcha_Function (); //call
   
       Wait(2); 
   
       Title = "";
   	
       var FaucetButton = ElementByXPath("//button[@id='openAdvertisement']");
       Click(FaucetButton);
   
       var Time_2_Break = DateTime.Now.AddSeconds(65);
       var WaitForCongratulations = ElementByXPath("//div[contains(@id,'viewCredited') and contains(text(),'Congratulation') ]");
       while (!IsVisible(WaitForCongratulations)) //not Visible
       {
   	     Wait();
   	     Log("Framed Ads - wait");
   	  
         if (DateTime.Now > Time_2_Break) //if the time above 65 sec 
         {
         Log("Framed Ads - longer - break - Time_2_Break");
         break; //break the wait loop
         }
       } //end while NOT Visible WaitForCongratulations
   
       var SuccessCheck = ElementByXPath("//div[contains(@id,'viewCredited') and contains(text(),'Congratulation') ]");
       if (IsVisible(SuccessCheck))
       {
       Log(SuccessCheck.Text);
       ClaimSuccess();
       }
   
       Wait(2);
   
       Title = "Framed Ads";
   
       CheckForPopupsEnabled = true; //enable
       CheckForPopups(); //call
   
       Wait(1);
   
     }// end Card_Exist
   
     if (!IsVisible(Card_Exist))
     {
     Log("Framed Ads - break - not Available");
     break;
     }
   
     if (DateTime.Now > TimeToWaitForBreak) //if the time above 65 sec 
     {
     Log("Framed Ads - break - TimeToWaitForBreak");
     break; //break the wait loop
     }
   
   } //end while true	
			
			
} // end FramedAds
//===========//

			

		//==============//
		//FaucetClaim//
		//==============//
        if (GetBoolSetting("FaucetClaim"))
        {
        GoToUrl("https://earnbtc.io/user/roll-win.page");
		Wait();
		Wait(2);		
		Log("FaucetClaim");	

         //Time
         var Time_Min_Checking_Exist = ElementByXPath("//div[@id='timer']");         

         if(IsVisible(Time_Min_Checking_Exist)) //Visible
         {
		 
         Log("CountDownTimer");  

         var MinVAR = ElementByXPath("//span[@id='minutes']"); 
         var SecVAR = ElementByXPath("//span[@id='seconds']");
		 
         int MinINT = Convert.ToInt32(MinVAR.Text)*60;
         int SecINT = Convert.ToInt32(SecVAR.Text);
				
         return MinINT + SecINT;
         }
		//=======//
		
        Wait();
        Wait(3);

        var ButtonSrart_1_Cap = ElementByXPath ("//button[contains(text(),'start')]");
        if (IsVisible(ButtonSrart_1_Cap)) //if NOT visible 
        {
        GoToUrl("https://earnbtc.io/url-shortners/generate");
		Wait();
		Wait(2);		
        ShortLink_Function(); //call
		} //end ButtonSrart_1_Cap
	
        Choose_Captcha_Function(); //call
		
		Wait();	
		Wait(5);
  
        var ButtonCap = ElementByXPath (" //button[@class='genric-btn primary circle btn-lg'] | //button[contains(text(),'Roll')] ");
        if (IsVisible(ButtonCap)) //if visible "disabled" 
        {
	     Click(ButtonCap);
         Log("Captcha_Function - ButtonCap");
        }			
  		  		
         Wait(2);
  
        var ButtonSrart_2_Cap = ElementByXPath ("//button[contains(text(),'start')]");
        if (!IsVisible(ButtonSrart_2_Cap)) //if NOT visible 
        {
          var Error_Message = ElementByXPath ("//div/strong[contains(text(),'invalid')]");
          if (IsVisible(Error_Message))
          {
              Log("Error_Message - Appear - we return after 1 min ");
              return 1*60; //we return after 1 min
          }
	
        } //end ButtonSrart_2_Cap
  
        Wait();

        Driver.Navigate().Refresh();
		
		Wait();	
		Wait(2);

        } // end FaucetClaim
	 //===========//

		//ad = true;    // if i do true - it report as succeed // only one time no multi and also required -> return GetWaitSetting();	
        return GetWaitSetting();	

        //We are good to continue
        return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet
//==============///
	
	
	
	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	

 
        //=================//
       //ShortLink_Function
        //=================//

        public void ShortLink_Function()
        {
			
        //call to ShortLink
        ShortLinkBypasser bypasser = new ShortLinkBypasser(this);
        bool ShorBool = bypasser.DoShortLink();
        if (!ShorBool)
        {
            Log("Fail shortlink");
        }

        }//end ShortLink_Function
        //=================//



        //=================//
       //Choose_Captcha_Function
        //=================//

        public int Choose_Captcha_Function()
        {

          if (GetBoolSetting("Choose_Captcha"))
          {     
            var RecaptchaChoose = ElementByXPath ("//li[@class='nav-item']//a[contains(text(),'RECAPTCHA')]")  ;
			Click(RecaptchaChoose);
			
            Wait();
            Wait(2);
		    
            Recaptcha_Function (); //call
		  }
		  
          if (!GetBoolSetting("Choose_Captcha"))
          { 
            var SolveMediaChoose = ElementByXPath ("//li[@class='nav-item']//a[contains(text(),'SOLVEMEDIA')]") ;
			Click(SolveMediaChoose);
         
		    Wait();
            Wait(2);
			
            Recaptcha_Function (); //call
		  }

        return 0;
		  
        }//end Captcha_Function
        //=================//


      //===================//
      //Recaptcha_Function
      //===================//
      public int Recaptcha_Function ()
      {
        ////in the script
         //for recaptcha popup after click on button - ("//button[contains(@class,'reload')] | //button[contains(@id,'reload')] ")
          var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')] | //div[@id='adcopy-puzzle-image'] "); 
          if (IsVisible(RecaptchaOpen_Iframe))
          {
            //SolveCaptcha if apper
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Fail solving captcha");
            }
            RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
           }
		
       return 0;		
	  }
      //===================//

	
} //end public class

