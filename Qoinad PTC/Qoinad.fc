using System;
using System.Drawing;
using System.IO;
using System.Linq;
using FaucetCollector.Script;
using OpenQA.Selenium;


public class Qocoinad : FaucetScript
{

    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("http://www.qoinad.com/user")
            {
               new FaucetSetting(){Name="User",Display="Email",Type=EditorType.TextBox,Required=true},
               new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
	
            };
        }
    }

	
	

    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "qoinad.com|Qoinad";


        SuccessXPath ="//div[@id='AfterCounterPanel']";
        FailXPath ="//div[@id='AfterCounterPanel' and contains(text(),'already watched')]";
		


        base.Start();
    }

	

    private const string BaseUrl="https://www.qoinad.com/";
    private const string LoginUrl=BaseUrl+"login.aspx";
    private const string AdsUrl=BaseUrl+"user/earn/ads.aspx";

    private bool GotoiFimNot(string url)
    {
        if (!Driver.Url.Contains(url))
        {
            GoToUrl(url);
            return true;
        }
        return false;
    }
	
	
	

 public override int DoLogin()
 {
        GoToUrl ( LoginUrl );
        Wait ( 2 );

        var UserBox=ElementByXPath("//input[contains(@id,'Username')]");
        if ( !IsVisible(UserBox) )
        {
            return Fail ( "Userbox is not visible" );
        }
        SetText ( UserBox , GetSetting ( "User" ) );

        var PasswordBox=ElementByXPath("//input[contains(@id,'Password')]");
        if ( !IsVisible(PasswordBox) )

        {
            return Fail ( "Password box not visible" );
        }
        SetText ( PasswordBox , GetPassword ( "Pass" ) );

        var LoginBtn=ElementByXPath("//input[contains(@id,'LoginButton')]");
        if ( !IsVisible(LoginBtn) )
        {
            return Fail ( "Login btn is not visible" );

        }

        Click ( LoginBtn );
        Wait ( 1 );


        var Errorlgn=ElementByXPath("//span[@id='ctl00_MainContentPlaceHolder_ctl00_FailureText']");
        if ( IsVisible(Errorlgn) )
        {
            Log ( Errorlgn.Text );
        }
       
        
    
        return base.DoLogin();
 }
    public override bool IsLoggedIn ( )
    {
        return ElementByXPath ( "//a[contains(@href,'logout')]" )!=null;
    }


    public override int DoSolveFaucet()
 {

   

        GoToUrl(AdsUrl);
        Wait ( 3 );

		
        var ads = ElementsByXPath("//div[contains(@class,'AboxActive Ad')]").Where(x=>IsVisible(x)).ToList();
        int n=0;
       
            int NAds = ads.Count;
        while (ads.Count > n)
        {
              
                    CheckForPopupsEnabled = false;


                    Click(ads[n], false);

                    Wait(3);

                    Driver.SwitchTo().Window(Driver.WindowHandles[1]);

                    Wait(3);

                    var Vbutton = FindElement(By.XPath("//input[@id='WatchAdButton']"));
                    if (Vbutton != null)
                    {
                        Click(Vbutton, false);
                        Wait();
                        try
                        {
                            Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                            DateTime t1 = DateTime.Now.AddSeconds(75);
                            while (!IsVisible(ElementByXPath("//div[@id='CaptchaPanel']")))
                            {
                                Wait();
                                if (DateTime.Now > t1)
                                {
                                    break;
                                }
                            }
                            Wait();
                            //p[@class='visualCaptcha-explanation']//strong
                            bool captcha_solved = false;
                            while (!captcha_solved)
                            {
                                var name_ = ElementByXPath("//p[@class='visualCaptcha-explanation']//strong");
                                captcha_solved = Solve_VisualCaptcha(name_.Text);
                                Wait();
                                if (!captcha_solved)
                                {
                                    var refresh = ElementByXPath("//div[@class='visualCaptcha-refresh-button']");
                                    Click(refresh);
                                    Wait(2, 3);
                                }
                            }
                            Wait();
                            var Credit = ElementByXPath("//input[@id='CreditAfterCaptcha']");
                            Click(Credit);

                            Wait(2, 3);
                             CheckFaucetResult ( );
                              Wait ( 1 );
                            Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                        }
                        catch (Exception)
                        {
                            CheckForPopupsEnabled = true;
                        }
                    }

                    CheckForPopupsEnabled = true;
                    CheckForPopups();
                    Wait();



                    if (!GotoiFimNot(AdsUrl))
                    {
                        Driver.Navigate().Refresh();
                    }
                    Wait(2, 3);
                    ads = ElementsByXPath("//div[contains(@class,'AboxActive Ad')]").Where ( x => IsVisible ( x ) ).ToList ( ); ;

                           
                if (ads.Count == NAds)
                {
                    n++;
                    
                    NAds = ads.Count;
                }  
		
     }
     return GetWaitSetting();
	 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
 }
	
	
	
	
	
	
    private bool Solve_VisualCaptcha(string name)
    {
        Wait();
        var dir = AssetDir("Other");
        dir += "\\Images_qoinad\\" + name + ".png";
        try
        {

            Stream d = new FileStream(dir, FileMode.Open);
            Bitmap img_c = new Bitmap(Image.FromStream(d));
            d.Close();

            int[] pixels = new int[5];
            for (int i = 0; i < 4; i++)
            {

                var element = ElementByXPath("//img[@id='visualCaptcha-img-" + i.ToString() + "']");

                Bitmap img_to_c = TakeScreenshot(Base.Captcha.CaptchaService.Manual, element);
             


                pixels[i] = CompareImage(img_c, img_to_c);
            }
            Wait();
            int solution = -1;
            int pixel_m = 0;

            for (int i = 0; i < 4; i++)
            {
                if (i == 0)
                {
                    pixel_m = pixels[i];
                    solution = i;
                }
                if (pixels[i] < pixel_m)
                {
                    pixel_m = pixels[i];
                    solution = i;
                }
            }

            var solution_xpath = ElementByXPath("//img[@id='visualCaptcha-img-" + solution.ToString() + "']");
            if (IsVisible(solution_xpath))
            {
                Click(solution_xpath);          
                Wait();
                return true;
            }
        }
        catch (Exception)
        {

        }

        return false;
    }
	
	
	
    private int CompareImage(Bitmap image1, Bitmap image2)
    {
        int cont = 0;
        for (int i = 0; i < image1.Height; i++)
        {
            for (int j = 0; j < image1.Width; j++)
            {
                if (image1.GetPixel(j, i) != image2.GetPixel(j, i))
                {

                    cont++;

                }
            }
        }

        return cont;


    }
}
